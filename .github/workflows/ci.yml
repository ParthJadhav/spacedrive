name: CI

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '**/.md'
  workflow_dispatch:

env:
  SPACEDRIVE_CUSTOM_APT_FLAGS: --no-install-recommends

jobs:
  typescript:
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Set up pnpm & dependencies
        uses: ./.github/actions/pnpm-setup

      - name: Perform typechecks
        run: pnpm typecheck

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.x.x

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install pnpm dependencies
        run: pnpm i --frozen-lockfile

      - name: Perform linting
        run: pnpm lint

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Cache Rust dependencies
        uses: ./.github/actions/cache-rust-deps

      - name: Generate Prisma client
        uses: ./.github/actions/generate-prisma-client

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  clippy_check:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - name: Cache Rust dependencies
        uses: ./.github/actions/cache-rust-deps

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 7
          run_install: false

      - name: Run 'setup-system.sh' script
        run: ./.github/scripts/setup-system.sh

      - name: Generate Prisma client
        uses: ./.github/actions/generate-prisma-client

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --release

  build-and-publish:
    name: Build and Publish (${{ matrix.platform }}-${{ matrix.architecture }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: true
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        architecture: [x64]
        vcpkgCommitId: [4a723f2d160e20d9be368482e5bcaa2b849be9b1]
        include:
          - platform: macos-latest
            architecture: arm64
            vcpkgCommitId: 4a723f2d160e20d9be368482e5bcaa2b849be9b1
    steps:
      - name: Log in to the Container registry
        if: matrix.platform == 'ubuntu-latest' && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, rust-src

      - name: Cache Rust dependencies
        uses: ./.github/actions/cache-rust-deps

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Set up pnpm & dependencies
        uses: ./.github/actions/pnpm-setup

      - name: Run 'setup-system.sh' script
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
        run: ./.github/scripts/setup-system.sh

      - name: Run 'setup-system.ps1' script
        if: matrix.platform == 'windows-latest'
        run: ./.github/scripts/setup-system.ps1 -ci

      - name: Install vcpkg and dependencies
        if: matrix.platform == 'windows-latest'
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'

          # If not using a submodule for vcpkg sources, this specifies which commit
          # id must be checkout from a Git repo. It must not set if using a submodule
          # for vcpkg.
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'

          # This is the glob expression used to locate the vcpkg.json and add its
          # hash to the cache key.
          # Note: do not use `${{ github.context }}` to compose the value as it
          # contains backslashes that would be misinterpreted. Instead
          # compose a value relative to the root of the repository using
          # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
          vcpkgJsonGlob: '**/apps/desktop/src-tauri/vcpkg.json'

          # This is needed to run `vcpkg install` command (after vcpkg is built) in
          # the directory where vcpkg.json has been located. Default is false,
          # It is highly suggested to let `run-cmake` to run vcpkg (i.e. `false`)
          # (i.e. let CMake run `vcpkg install`) using the vcpkg.cmake toolchain.
          runVcpkgInstall: true

      - name: Integrate vcpkg and copy libraries
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          $ErrorActionPreference = "SilentlyContinue"
          $vcpkgRoot = ${{ github.workspace }}\vcpkg
          & "$vcpkgRoot\vcpkg.exe" integrate install | Out-Default
          Copy-Item "$vcpkgRoot\installed\x64-windows\bin\*.dll" ".\apps\desktop\src-tauri\"

      - name: Generate Prisma client
        uses: ./.github/actions/generate-prisma-client

      - name: Cargo fetch
        run: cargo fetch

      - name: Cargo test core
        run: cargo test -p sd-core -F location-watcher

      - name: Check core
        run: cargo check -p sd-core --release

      - name: Bundle Desktop
        run: pnpm desktop tauri build

      - name: Publish server Docker image
        if: matrix.platform == 'ubuntu-latest' && github.event_name != 'pull_request'
        uses: ./.github/actions/publish-server-image

      - name: Publish artifacts
        uses: ./.github/actions/publish-artifacts
